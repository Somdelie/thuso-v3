generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  EDITOR
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserType {
  NORMAL
  FREELANCER
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  email                 String                 @unique
  name                  String
  phone                 String?
  image                 String?
  status                UserStatus             @default(ACTIVE)
  userType              UserType               @default(NORMAL)
  isAproved             Boolean                @default(false)
  role                  UserRole               @default(USER)
  emailVerified         DateTime?
  address               Address?
  about                 String?
  jobType               String?
  documentPhoto         String?
  password              String?
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  accounts                Account[]
  twoFactorConfirmationId String?   @db.ObjectId
  jobs                    Job[] // Each user can have multiple jobs
}

// Address is an embedded document
type Address {
  street String
  city   String
  state  String
  zip    String
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Job {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  type         String
  locationType String
  location     String?
  salary       String
  description  String?
  approved     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  authorEmail String? // Reference to the user who owns the job
  author      User?   @relation(fields: [authorEmail], references: [email])
}
